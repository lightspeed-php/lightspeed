#!/usr/bin/env php
<?php

use GuzzleHttp\Client;
use PHPUnit\TextUI\Command as TextUICommand;
use ThingyClient\Providers\NullProvider;
use ThingyClient\API;
use ThingyClient\Command;
use ThingyClient\Providers\ProviderFactory;

(static function () {
    // Used when this is required using composer.
    $vendorPath = dirname(__DIR__, 4).'/vendor/autoload.php';

    // Used when maintainers are running tests.
    $localPath = dirname(__DIR__).'/vendor/autoload.php';

    if (file_exists($vendorPath)) {
        include_once $vendorPath;
    } else {
        include_once $localPath;
    }

    $provider = ProviderFactory::resolveProvider();

    // if no provider is found, we aren't running in CI so run as vanilla phpunit
    if ($provider === false) {
        $command = new TextUICommand();
        $command->run($_SERVER['argv']);
        return;
    }

    require_once __DIR__.'/../overrides/TextUI/TestRunner.php';

    $client = new Client([
        'base_uri' => $_SERVER['THINGY_BASE_URL'],
        'headers' => [
            'User-Agent' => 'client+php version', // TODO
            'Authorization' => 'Bearer '. $_SERVER['THINGY_API_TOKEN'],
            'Accept' => 'application/json',
        ],
    ]);

    $command = new Command(new Api($client, $provider));

    $command->run($_SERVER['argv']);
})();
